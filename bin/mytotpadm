#!/usr/bin/perl -w
#
# This file is part of MyTOTP.
#
# MyTOTP - My Time-Based One-Time Password
#
# Copyright 2017 Bennett Samowich <bennett@foolean.org>
#
# MyTOTP is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# MyTOTP is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with MyTOTP.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################
use strict;
use warnings 'all';

use English qw(-no_match_vars);
use File::Basename;
use Getopt::Long;
use Authen::MyTOTP;
use Term::ReadKey;
use Time::Local;

# Our program name and version
our $PROGRAM = basename(__FILE__);
our $VERSION = '1.0.0';

# Defaults
my %options = (
    'add'      => 0,
    'del'      => 0,
    'mod'      => 0,
    'debug'    => 0,
    'lifetime' => undef,
    'info'     => 0,
    'list'     => 0,
    'lock'     => 0,
    'pin'      => 0,
    'step'     => 0,
    'bits'     => undef,
    'version'  => 0,
    'help'     => 0,
    'unlock'   => 0,
    'username' => q{},
);

# Argument specifications for Getopt::Long.
my @arg_specs = qw(
  add|A
  del|D
  mod|M
  debug|d
  lifetime|l=s
  info|I
  dump|X
  lock|L
  pin|P
  step|s=s
  bits|b=s
  unlock|U
  username|u
  version|v
  help|h|?
);

# Parse the command-line options
Getopt::Long::Configure('bundling');
GetOptions( \%options, @arg_specs );
if ( $options{'help'} )    { usage();   exit 1; }
if ( $options{'version'} ) { version(); exit 1; }

# Get the username we're processing
my $user_name = shift;

# Only root should be able to do certain things
my $my_name = lc getpwuid $REAL_USER_ID;
my $is_root = 0;
if ( $my_name eq 'root' ) {
    $is_root = 1;
}

# Create our MyTOTP object
my $mytotp = Authen::MyTOTP->new( debug => $options{'debug'}, );

if ( $options{'add'} )    { add_user($user_name); }
if ( $options{'del'} )    { del_user($user_name); }
if ( $options{'mod'} )    { mod_user($user_name); }
if ( $options{'info'} )   { user_info($user_name); }
if ( $options{'pin'} )    { user_pin($user_name); }
if ( $options{'dump'} )   { dump_users(); exit 0; }
if ( $options{'lock'} )   { lock_user($user_name); }
if ( $options{'unlock'} ) { unlock_user($user_name); }

Authen::MyTOTP::notice( '%s: no action specified', $PROGRAM );
usage();
exit 0;    # should never get here

# dump_users
#   Print the token database
sub dump_users {
    if ( !$is_root ) {
        Authen::MyTOTP::fatal( '%s: Only root may enumerate accounts',
            $PROGRAM );
        exit 1;
    }
    $mytotp->list_users();
    exit 0;
}

# lock_user
#   Lock an account in the token database
sub lock_user {
    my $username = shift;
    if ( !defined $username ) {
        Authen::MyTOTP::error( '%s: Must provide a username', $PROGRAM );
        usage_lock();
    }
    $mytotp->lock_account($username);
    exit 0;
}

# unlock_user
#   Unlock an occount in the token database
sub unlock_user {
    my $username = shift;
    if ( !defined $username ) {
        Authen::MyTOTP::error( '%s: Must provide a username', $PROGRAM );
        usage_unlock();
    }
    $mytotp->unlock_account($username);
    exit 0;
}

# mod_user
#   Modify an account
sub mod_user {
    my $username = shift;
    if ( !$is_root ) {
        Authen::MyTOTP::fatal( '%s: Only root may modify accounts', $PROGRAM );
        exit 1;
    }
    if ( !defined $username ) {
        Authen::MyTOTP::error( '%s: Must provide a username', $PROGRAM );
        usage_mod();
    }

    # Get the user's current entry
    my $userent = $mytotp->get_user($username);
    if ( !defined $userent ) {
        Authen::MyTOTP::notice( '%s: user "%s" does not exist',
            $PROGRAM, $username );
        exit 1;
    }

    # Updating the step?
    if ( $options{'step'} ne '0' ) {

        # Make sure the step is numeric
        if ( $options{'step'} !~ m/^\d+$/smx ) {
            Authen::MyTOTP::error( '%s: step value "%s" is not numeric',
                $PROGRAM, $options{'step'} );
            usage_mod();
            exit 1;
        }
        $mytotp->update_step( $username, $options{'step'} );
    }

    # Updating the secret?
    if ( defined $options{'bits'} ) {
        if ( $options{'bits'} !~ m/^\d+$/smx ) {
            Authen::MyTOTP::error( '%s: secret bits value "%s" is not numeric',
                $PROGRAM, $options{'bits'} );
            usage_mod();
            exit 1;
        }
        my $pin = get_old_pin(1);
        $mytotp->update_secret( $username,
            $mytotp->generate_secret( $options{'bits'} ), $pin );
    }

    # Updating the expiration
    if ( defined $options{'lifetime'} ) {
        ## no critic(ProtectPrivateSubs)
        $mytotp->update_expires( $username,
            Authen::MyTOTP::_compute_expiration( $options{'lifetime'} ) );
        ## use critic
    }

    user_info( $userent->{'username'} );
    exit 0;
}

# add_user
#   Add a new account
sub add_user {
    my $username = shift;
    if ( !$is_root ) {
        Authen::MyTOTP::fatal( '%s: Only root may add accounts', $PROGRAM );
        exit 1;
    }
    if ( !defined $username ) {
        Authen::MyTOTP::error( '%s: Must provide a username', $PROGRAM );
        usage_add();
    }

    # Make sure the user doesn't already exist
    if ( $mytotp->get_user($username) ) {
        Authen::MyTOTP::notice( '%s: user "%s" already exists',
            $PROGRAM, $username );
        exit 0;
    }

    # Make sure the step is numeric
    if ( $options{'step'} !~ m/^\d+$/smx ) {
        Authen::MyTOTP::error( '%s: step value "%s" is not numeric',
            $PROGRAM, $options{'step'} );
        usage_add();
        exit 1;
    }

    # Make sure the secret bits is numeric
    if ( defined $options{'bits'} ) {
        if ( $options{'bits'} !~ m/^\d+$/smx ) {
            Authen::MyTOTP::error( '%s: secret bits value "%s" is not numeric',
                $PROGRAM, $options{'bits'} );
            usage_add();
            exit 1;
        }
    }

    # Get a PIN for the account
    my $pin = get_new_pin();
    if ( !defined $pin ) { exit 1; }

    # Assemble our user entry
    my $userent = {};
    $userent->{'username'} = $username;
    $userent->{'step'} = $options{'step'} || $Authen::MyTOTP::DEFAULT_STEP_SIZE;
    $userent->{'secret'}     = $mytotp->generate_secret( $options{'secret'} );
    $userent->{'pin'}        = $pin;
    $userent->{'skew'}       = 0;
    $userent->{'fail_count'} = 0;
    $userent->{'last_used'}  = 0;
    $userent->{'expires'}    = 0;
    $userent->{'lifetime'}   = $options{'lifetime'} || 0;

    # ... and add it
    my $result = $mytotp->add_user($userent);

    if ( $result == 1 ) {
        user_info( $userent->{'username'} );
        exit 0;
    }
    exit 1;

}

# del_user
#   Delete an account
sub del_user {
    my $username = shift;
    if ( !$is_root ) {
        Authen::MyTOTP::fatal( '%s: Only root may delete accounts', $PROGRAM );
        exit 1;
    }
    if ( !defined $username ) {
        Authen::MyTOTP::error( '%s: Must provide a username', $PROGRAM );
        usage_del();
    }

    if ( !$mytotp->get_user($username) ) {
        Authen::MyTOTP::notice( '%s: user "%s" does not exist',
            $PROGRAM, $username );
        exit 1;
    }
    $mytotp->del_user($username);
    exit 0;
}

# user_pin
#   Change an account's PIN
sub user_pin {
    my $username = shift;
    if ( !defined $username && $is_root ) {
        Authen::MyTOTP::error( '%s: Must provide a username', $PROGRAM );
        usage_pin();
    }
    if ( !$is_root && defined $username ) {
        Authen::MyTOTP::fatal(
            '%s: Only root may change the PIN of other accounts', $PROGRAM );
        exit 1;
    }

    # If we're not root then use our own name
    if ( !$is_root ) {
        $username = $my_name;
    }

    # Get the account's entry
    my $userent = $mytotp->get_user($username);
    if ( !defined $userent ) {
        Authen::MyTOTP::notice( '%s: user "%s" does not exist',
            $PROGRAM, $username );
        exit 1;
    }

    Authen::MyTOTP::notice( 'Changing PIN for "%s"', $username );

    my $old_pin;
    ## no critic(ProtectPrivateSubs)
    if ( !$is_root
        || Authen::MyTOTP::_is_encrypted_secret( $userent->{'secret'} ) )
    {
        ## use critic

        # Verify the user's current PIN
        $old_pin = get_old_pin();
        if ( $userent->{'pin'} ne crypt $old_pin, $userent->{'pin'} ) {
            Authen::MyTOTP::fatal( '%s: Invalid PIN entry, unable to continue',
                $PROGRAM );
            exit 1;    # should never get here
        }
    }

    # Get the new PIN
    $options{'pin'} = get_new_pin();
    if ( !defined $options{'pin'} ) { exit 1; }

    # Update the PIN
    $mytotp->update_pin( $username, $options{'pin'}, $old_pin );
    exit 0;
}

# user_info
#   Display the details of an account
sub user_info {
    my $username = shift;
    if ( !$is_root ) {
        Authen::MyTOTP::fatal( '%s: Only root may enumerate accounts',
            $PROGRAM );
        exit 1;
    }
    if ( !defined $username ) {
        Authen::MyTOTP::error( '%s: Must provide a username', $PROGRAM );
        usage_info();
    }

    # Get the user's entry
    my $userent = $mytotp->get_user($username);
    if ( !defined $userent ) {
        Authen::MyTOTP::notice( '%s: user "%s" does not exist',
            $PROGRAM, $username );
        exit 1;
    }

    # Print the user's entry
    printf "username:   %s\n",      $userent->{'username'};
    printf "secret:     %s\n",      $userent->{'secret'};
    printf "pin:        %s\n",      $userent->{'pin'};
    printf "step:       %s\n",      $userent->{'step'};
    printf "expires:    (%s) %s\n", $userent->{'expires'},
      (
        $userent->{'expires'} > 0
        ? scalar localtime $userent->{'expires'}
        : 'Never'
      );
    printf "fail_count: %s\n",      $userent->{'fail_count'};
    printf "last_used:  (%s) %s\n", $userent->{'last_used'},
      (
        $userent->{'last_used'} > 0
        ? scalar localtime $userent->{'last_used'} * $userent->{'step'}
        : 'Never'
      );

    exit 0;
}

# get_new_pin
#   Prompt the user for a new PIN
sub get_new_pin {

    my $attempts = 0;

    while ( $attempts <= 2 ) {

        # Get the first pin entry
        printf 'Enter new PIN: ';
        ReadMode('noecho');    # don't echo
        chomp( my $pin1 = <> );
        ReadMode(0);           # back to normal
        printf "\n";

        # Get the second pin entry
        printf 'Re-enter new PIN: ';
        ReadMode('noecho');    # don't echo
        chomp( my $pin2 = <> );
        ReadMode(0);           # back to normal
        printf "\n";

        if ( $pin1 ne $pin2 ) {
            Authen::MyTOTP::error('PINs do not match');
        }
        else {
            return $pin1;
        }
        $attempts++;
    }
    return;
}

# get_old_pin
#   Prompt the user for their current PIN
sub get_old_pin {
    my $verify = shift || undef;

    my $attempts = 0;

    while ( $attempts <= 2 ) {

        # Get the first pin entry
        printf 'Enter current PIN: ';
        ReadMode('noecho');    # don't echo
        chomp( my $pin1 = <> );
        ReadMode(0);           # back to normal
        printf "\n";

        my $pin2 = $pin1;
        if ( defined $verify ) {

            # Get the second pin entry
            printf 'Re-enter current PIN: ';
            ReadMode('noecho');    # don't echo
            chomp( $pin2 = <> );
            ReadMode(0);           # back to normal
            printf "\n";
        }

        if ( $pin1 ne $pin2 ) {
            Authen::MyTOTP::error('PINs do not match');
        }
        else {
            return $pin1;
        }
        $attempts++;
    }
    return;
}

# version - Standard version routine
sub version {
    printf "%s v%s\n", $PROGRAM, $VERSION;
    return;
}

# usage - Standard help routine
sub usage {

    if ( $options{'help'} && $options{'add'} )    { usage_add();    exit 1 }
    if ( $options{'help'} && $options{'del'} )    { usage_del();    exit 1 }
    if ( $options{'help'} && $options{'mod'} )    { usage_mod();    exit 1 }
    if ( $options{'help'} && $options{'info'} )   { usage_info();   exit 1 }
    if ( $options{'help'} && $options{'pin'} )    { usage_pin();    exit 1 }
    if ( $options{'help'} && $options{'lock'} )   { usage_lock();   exit 1 }
    if ( $options{'help'} && $options{'dump'} )   { usage_dump();   exit 1 }
    if ( $options{'help'} && $options{'unlock'} ) { usage_unlock(); exit 1 }

    version();

    printf "Usage: %s [OPTIONS] username\n", $PROGRAM;
    printf "\n";
    printf "Miscelaneous Options\n";
    printf "    -h, --help      - Print this message\n";
    printf "    -v, --version   - Print version information\n";
    printf "\n";
    printf "Major modes of operation:\n";
    printf "    -A, --add       - Add a new token account\n";
    printf "    -D, --del       - Delete a token account\n";
    printf "    -I, --info      - Print information for a token account\n";
    printf "    -L, --lock      - Lock the account\n";
    printf "    -M, --mod       - Modify a token account\n";
    printf "    -P, --pin       - Set the PIN for a token account\n";
    printf "    -U, --unlock    - Unlock the account\n";
    printf "    -X, --dump      - Print the token database\n";
    printf "\n";
    printf "For detailed help on the major modes listed above\n";
    printf "use --help after the mode\n";
    printf "e.g.\n\t%s --add --help\n", $PROGRAM;
    exit 1;
}

sub usage_add {

    printf "Usage: %s --add [OPTIONS] username\n", $PROGRAM;
    printf "\n";
    printf "This causes %s to add a new account into the token database.\n",
      $PROGRAM;
    printf "\n";
    printf "Options that are valid with --add are:\n";
    printf "    -b, --bits [BITS]     - Size of the shared secret in bits\n";
    printf "    -l, --lifetime [LIFE] - Lifetime of the token (e.g. 3y)\n";
    printf "    -s, --step [STEP]     - Step size of the token\n";

    exit 1;
}

sub usage_mod {

    printf "Usage: %s --mod [OPTIONS] username\n", $PROGRAM;
    printf "\n";
    printf "This causes %s to modify an account in the token database.\n",
      $PROGRAM;
    printf "\n";
    printf "Options that are valid with --add are:\n";
    printf "    -b, --secret [BITS]       - Generate a new secret\n";
    printf "    -l, --lifetime [LIFE]     - Lifetime of the token (e.g. 3y)\n";
    printf "    -s, --step [STEP]         - New step size for the token\n";

    exit 1;
}

sub usage_del {

    printf "Usage: %s --del username\n", $PROGRAM;
    printf "\n";
    printf "This causes %s to delete an account from the token database.\n",
      $PROGRAM;

    exit 1;
}

sub usage_lock {

    printf "Usage: %s --lock username\n", $PROGRAM;
    printf "\n";
    printf "This causes %s to lock the account.\n", $PROGRAM;

    exit 1;
}

sub usage_unlock {

    printf "Usage: %s --unlock username\n", $PROGRAM;
    printf "\n";
    printf "This causes %s to unlock the account.\n", $PROGRAM;

    exit 1;
}

sub usage_pin {

    printf "Usage: %s --pin username\n", $PROGRAM;
    printf "\n";
    printf
      "This causes %s to set the PIN for an account in the token database.\n",
      $PROGRAM;

    exit 1;
}

sub usage_dump {

    printf "Usage: %s --dump\n", $PROGRAM;
    printf "\n";
    printf "This causes %s to print the token database.\n", $PROGRAM;

    exit 1;
}

sub usage_info {

    printf "Usage: %s --info [OPTIONS] username\n", $PROGRAM;
    printf "\n";
    printf
"This causes %s to print the information in the token database for an account.\n",
      $PROGRAM;
    printf "\n";

    exit 1;
}

__END__

=head1 NAME

mytotpadm - MyTOTP Administration

=head1 SYNOPSIS

    mytotpadm [mode] [options]


=head1 DESCRIPTION

B<mytotpadm> is the primary tool for performing administrative tasks on the
MyTOTP token database.

=head1 MODES OF OPERATION

mytotpadm has several modes of operation

=head1 Adding accounts into the token database:

=over 4

=item -A, --add [OPTIONS] username

=over 4

=item username

Username of the account to add

=item -b, --bits [BITS]

Size of the shared secret in bits.  The number will be rounded up to the
nearst byte.

=item -l, --lifetime [LIFE]

Lifetime of the token in the format of N[ymd] where 'y', 'm', or 'd' specify
that the numeric portion is in years, months, or days.  (e.g. 3y is a 3 year
token)

=item -s, --step [STEP]

Step size of the token.  The step size is the duration each TOKENCODE is valid
for.  (e.g. a step of 30 is a 30-second token)

=back

=back

=head1 Deleting accounts from the token database:

=over 4

=item -D, --del username

=over 4

=item username

Username of the account to delete

=back

=back

=head1 Displaying token account information:

=over 4

=item -I, --info username

Print information for a token account

=over 4

=item username

Username of the account to print information for

=back

=back

=head1 Lock an account in the token database:

=over 4

=item -L, --lock username

Lock an account in the account database

=over 4

=item username

Username of the account to lock

=back

=back

=head1 Modify an account in the token database:

=over 4

=item -M, --mod [OPTIONS] username

Modify a token account

=over 4

=item username

Username of the account to modify.

=item -b, --bits [BITS]

Size of the shared secret in bits.  The number will be rounded up to the
nearst byte.

=item -l, --lifetime [LIFE]

Lifetime of the token in the format of N[ymd] where 'y', 'm', or 'd' specify
that the numeric portion is in years, months, or days.  (e.g. 3y is a 3 year
token)

=item -s, --step [STEP]

Step size of the token.  The step size is the duration each TOKENCODE is valid
for.  (e.g. a step of 30 is a 30-second token)

=back

=back

=head1 Change the PIN for an account in the token database:

=over 4

=item -P, --pin username

Set the PIN for a token account

=over 4

=item username

Username of the account to change the PIN for.

=back

=back

=head1 Unlock an account in the token database:

=over 4

=item -U, --unlock username

Unlock an account in the account database

=over 4

=item username

Username of the account to unlock

=back

=back

=head1 INCOMPATIBILITIES

There are no known incompatibilities with MyTOTP

=head1 BUGS

Please report problems to https://github.com/foolean/mytotp/issues

=head1 AUTHOR

Bennett Samowich <bennett@foolean.org>

=head1 LICENSE AND COPYRIGHT

This file is part of MyTOTP.

Copyright 2017 Bennett Samowich <bennett@foolean.org>

MyTOTP is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

MyTOTP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with MyTOTP.  If not, see <http://www.gnu.org/licenses/>.

=cut

